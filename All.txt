1. Создать функции в своем срипте и вынести туда повторяющийся коднапример
a) функция которая останавливает сервис
b) функция которая запускает сервис
с) функция которая читает из файла 
d) функция которая пишет в файл
скрипт будет иметь вид:
получить имя сервиса из файла 
вызвать функцию С потом if ( сервис запущен?) тогда: 
вызываем функцию A и т.д.
и продолжаешь работать с git и учить базовые вещи перед тем как мы перейдем к клаудам 
для этих изменений создай отдельный бранч в своем репозитори 
и внеси изменения в свой скрипт согласно замечаний выше 
потом сделай пул-реквест в мастер ветку (PR)
и меня в ревьюверы
если что-то не понятно из того что я пишу спрашивай 
+ старайся делать комменты на английском не бойся пусть с ошибками 
мы работаем на международном маркете только английский привыкай :)
__________________________________
Power Shell
Bash
Pyton
__________________________________
Azure
__________________________________
Cloud - Облачные вычисления, модель обеспечения удобного сетевого доступа по требованию к
некоторому общему фонду конфигурируемых вычислительных ресурсов (например, сетям передачи
данных, серверам, устройствам хранения данных, приложениям и сервисам — как вместе, так и
по отдельности), которые могут быть оперативно предоставлены и освобождены с минимальными
эксплуатационными затратами или обращениями к провайдеру. Потребители облачных вычислений
могут значительно уменьшить расходы на инфраструктуру информационных технологий (в кратко
срочном и среднесрочном планах) и гибко реагировать на изменения вычислительных потребнос
тей, используя свойства вычислительной эластичности (англ. elastic computing) облачных услуг.

Continuous Integration  (Непрерывная интеграция) — практика разработки программного обес
печения, которая заключается в постоянном слиянии рабочих копий в общую основную ветвь
разработки (до нескольких раз в день) и выполнении частых автоматизированных сборок проек
та для скорейшего выявления потенциальных дефектов и решения интеграционных проблем. В
обычном проекте, где над разными частями системы разработчики трудятся независимо, стадия
интеграции является заключительной. Она может непредсказуемо задержать окончание работ.
Переход к непрерывной интеграции позволяет снизить трудоёмкость интеграции и сделать её
более предсказуемой за счёт наиболее раннего обнаружения и устранения ошибок и противоречий,
но основным преимуществом является сокращение стоимости исправления дефекта, за счёт раннего
его выявления.

Continuous delivery (Непрерывная доставка) - это подход к разработке программного обеспечения,
при котором команды производят программное обеспечение в короткие циклы, гарантируя, что
программное обеспечение может быть выпущено надежно в любое время, а при выпуске программного
обеспечения - вручную. Он направлен на создание, тестирование и выпуск программного обеспечения
с большей скоростью и частотой. Этот подход помогает снизить стоимость, время и риск внесения
изменений, позволяя производить более последовательные обновления приложений в рабочей среде.
Простой и повторяемый процесс развертывания важен для непрерывной доставки.

DevOps - это набор методов разработки программного обеспечения, который сочетает в себе
разработку программного обеспечения ( Dev ) и операции с информационными технологиями ( Ops ),
чтобы сократить жизненный цикл разработки системы, одновременно предоставляя функции,
исправления и обновления в тесной увязке с бизнес-целями.
Поскольку DevOps предназначен для межфункционального режима работы, те, кто применяет
методологию, используют разные наборы инструментов, называемые «цепочками инструментов »,
а не один. Ожидается, что эти наборы инструментов будут вписываться в одну или несколько 
из следующих категорий, отражающих ключевые аспекты процесса разработки и доставки:
Кодирование - разработка и просмотр кода, инструменты управления исходным кодом , слияние кода
Building - инструменты непрерывной интеграции , статус сборки
Тестирование - инструменты непрерывного тестирования , обеспечивающие обратную связь по бизнес-рискам
Упаковка - хранилище артефактов , подготовка к развертыванию приложения
Релизинг - управление изменениями, утверждения релизов, автоматизация релизов
Конфигурирование - настройка и управление инфраструктурой , инфраструктура как инструменты кода
Мониторинг - мониторинг производительности приложений , опыт конечного пользователя
_____________________________________________________________
Autoscaling (Автоскейлинг) — инструмент автоматического вертикального масштабирования
ресурсов (CPU|RAM|HDD). Автоскейлинг группа используется для более точного распределения 
ресурсов мы выдаем виртуальной машине не фактические ядра процессора мастер-сервера, 
а выдаем всегда любой виртуальной машине 12 ядер мастер-сервера и при помощи cgroups лимитируем, 
сколько процентов от одного ядра данный процесс виртуальной машины может потребить.



